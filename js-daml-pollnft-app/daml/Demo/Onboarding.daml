module Demo.Onboarding where

    import Demo.Poll
    import Topl.Onboarding
    import Topl.Asset
    import Topl.Utils
    import DA.List

    template PollAppOnboarding
        with
            publicParty: Party
            operator: Party
            operatorAddress: Text
            yesAddress: Text
            noAddress: Text
            changeAddress: Text
            assetShortName: Text
        where
            signatory operator

            observer publicParty

            key (operator): Party

            maintainer key

            nonconsuming choice ConnectToApp: ContractId ConnectionRequest
                with
                    userParty: Party
                    userAddress: Text
                controller userParty
                do
                    let asset = AssetCode
                                    with
                                        issuerAddress = operatorAddress
                                        version = 1
                                        shortName = assetShortName
                    create ConnectionRequest
                        with
                            user = userParty
                            operatorAddress = operatorAddress
                            assetCode = asset
                            ..


    template ConnectionRequest
        with
            user: Party
            operator: Party
            operatorAddress: Text
            userAddress: Text
            yesAddress : Text
            noAddress : Text
            changeAddress : Text
            assetCode : AssetCode
        where
            signatory user

            observer operator

            key (user): Party

            maintainer key

            choice ArchiveOperator_ConnectionRequest: ()
                controller operator
                    do
                        return ()

            choice ArchiveUser_ConnectionRequest: ()
                controller user
                do
                    return ()

            choice ConnectionRequest_Accept: ContractId AcceptedConnection
                controller operator
                do
                    let asset = AssetCode
                                    with
                                        issuerAddress = operatorAddress
                                        version = 1
                                        shortName = "Vote"
                    create AssetMintingRequest
                        with 
                            requestor = user
                            someOrgId = None
                            from      = [ operatorAddress ]
                            to        = [ (userAddress, 1 )]
                            changeAddress  = operatorAddress
                            assetCode   = asset
                            quantity   = 1
                            someCommitRoot = None
                            someMetadata   = None
                            fee            = 100
                            ..
                    create AcceptedConnection 
                        with
                            ..

    template AcceptedConnection
        with
            user: Party
            operator: Party
            operatorAddress: Text
            userAddress: Text
            yesAddress : Text
            noAddress : Text
            changeAddress : Text
            assetCode : AssetCode
        where

            signatory user, operator

            observer operator

            key (user): Party

            maintainer key


            choice ArchiveOperator_AcceptedConnection: ()
                controller operator
                    do
                        return ()

            choice ArchiveUser_AcceptedConnection: ()
                controller user
                do
                    return ()

            choice AcceptedConnection_StartPoll: ContractId DemoPoll with
                signedAssetMinting: SignedAssetMinting
                signedAssetMintingCid: ContractId SignedAssetMinting
                    controller operator
                do
                    archive signedAssetMintingCid
                    exerciseByKey @User (operator, operator) (User_SendPolys signedAssetMinting.from [ ((fst (head (signedAssetMinting).to)), 1000 )] (head signedAssetMinting.from)   100)
                    create DemoPoll with
                        participant = user
                        issuerAddress = operatorAddress
                        fromAddress = userAddress
                        assetCode = assetCode
                        boxNonce = signedAssetMinting.boxNonce
                        ..

