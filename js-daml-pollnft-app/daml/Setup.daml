module Setup where

import Daml.Script
import Topl.Onboarding
import Demo.Onboarding
import qualified DA.Text as T

import DA.Optional (fromSomeNote)

initialize : Script [Party]
initialize = do
      public <- createPublic
      operator <- allocateParty "Operator"
      operatorId <- validateUserId "operator"
      alice <- allocateParty "Alice"
      aliceId <- validateUserId "alice"
      bob <- allocateParty "Bob"
      bobId <- validateUserId "bob"
      eve <- allocateParty "Eve"
      eveId <- validateUserId "eve"
      debug ("Operator: " <> partyToText operator)
      debug ("Alice: " <> partyToText alice)
      let operatorAddress = "AUANVY6RqbJtTnQS1AFTQBjXMFYDknhV8NEixHFLmeZynMxVbp64"
      let changeAddress = operatorAddress
      let yesAddress = "AUAstWhFRBCtUbukbZNEfkH6hDzHr5JCn4j5ALZ64Gq6xbdytJVi"
      let noAddress = "AUAS4b2p6GBSgC5SvUXenmFCx71GbZAPe9S9st2NmtRVttwSanNG"
      let assetShortName = "Vote"
      operatorCid <- submit operator do
        createCmd Operator with operator = operator, address = operatorAddress
      userInvitationCid <- submit operator do
        exerciseCmd operatorCid  Operator_InviteUser 
          with user = operator
      submit operator do
        createCmd PollAppOnboarding with publicParty = public, operator = operator, ..
      aliceUserCid <- submit operator do
        exerciseCmd userInvitationCid UserInvitation_Accept
      createUser (Daml.Script.User aliceId (Some alice)) [(CanActAs alice), (CanReadAs public)]
      createUser (Daml.Script.User bobId (Some bob)) [CanActAs bob, CanReadAs public]
      createUser (Daml.Script.User eveId (Some eve)) [CanActAs eve, CanReadAs public]
      createUser (Daml.Script.User operatorId (Some operator)) [CanActAs operator, CanReadAs public]
      pure []

createPublic : Script Party
createPublic = do
  publicUser <- getOrCreateUser "Public" None
  pure $ getPrimaryParty publicUser

getOrCreateUser : Text -> Optional Party -> Script Daml.Script.User
getOrCreateUser alias publicM = do
  userId <- validateUserId $ toUserId alias
  try
    getUser userId
  catch
    UserNotFound _ -> do
      p <- allocateParty alias
      let u = Daml.Script.User userId (Some p)
      createUser u $ CanActAs p :: [CanReadAs public | Some public <- [publicM]]
      pure u

-- | Convert a text to a valid user id.
toUserId : Text -> Text
toUserId = T.asciiToLower

-- | Try to get the primary party of a user and fail if the user has no associated primary party.
getPrimaryParty : Daml.Script.User -> Party
getPrimaryParty u = fromSomeNote ("User " <> userIdToText u.userId <> " is missing a primary party.") u.primaryParty
